/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DAOFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createDAO((address,address,string[],string[],address[][],string[],string[][],address[],string[],string[][]))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createDAO",
    values: [
      {
        daoImplementation: string;
        accessControlImplementation: string;
        roles: string[];
        rolesAdmins: string[];
        members: string[][];
        daoFunctionDescs: string[];
        daoActionRoles: string[][];
        moduleTargets: string[];
        moduleFunctionDescs: string[];
        moduleActionRoles: string[][];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "createDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "DAOCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOCreated"): EventFragment;
}

export type DAOCreatedEvent = TypedEvent<
  [string, string] & { DAOAddress: string; accessControl: string }
>;

export class DAOFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DAOFactoryInterface;

  functions: {
    createDAO(
      createDaoParams: {
        daoImplementation: string;
        accessControlImplementation: string;
        roles: string[];
        rolesAdmins: string[];
        members: string[][];
        daoFunctionDescs: string[];
        daoActionRoles: string[][];
        moduleTargets: string[];
        moduleFunctionDescs: string[];
        moduleActionRoles: string[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createDAO(
    createDaoParams: {
      daoImplementation: string;
      accessControlImplementation: string;
      roles: string[];
      rolesAdmins: string[];
      members: string[][];
      daoFunctionDescs: string[];
      daoActionRoles: string[][];
      moduleTargets: string[];
      moduleFunctionDescs: string[];
      moduleActionRoles: string[][];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createDAO(
      createDaoParams: {
        daoImplementation: string;
        accessControlImplementation: string;
        roles: string[];
        rolesAdmins: string[];
        members: string[][];
        daoFunctionDescs: string[];
        daoActionRoles: string[][];
        moduleTargets: string[];
        moduleFunctionDescs: string[];
        moduleActionRoles: string[][];
      },
      overrides?: CallOverrides
    ): Promise<[string, string] & { dao: string; accessControl: string }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DAOCreated(address,address)"(
      DAOAddress?: string | null,
      accessControl?: string | null
    ): TypedEventFilter<
      [string, string],
      { DAOAddress: string; accessControl: string }
    >;

    DAOCreated(
      DAOAddress?: string | null,
      accessControl?: string | null
    ): TypedEventFilter<
      [string, string],
      { DAOAddress: string; accessControl: string }
    >;
  };

  estimateGas: {
    createDAO(
      createDaoParams: {
        daoImplementation: string;
        accessControlImplementation: string;
        roles: string[];
        rolesAdmins: string[];
        members: string[][];
        daoFunctionDescs: string[];
        daoActionRoles: string[][];
        moduleTargets: string[];
        moduleFunctionDescs: string[];
        moduleActionRoles: string[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDAO(
      createDaoParams: {
        daoImplementation: string;
        accessControlImplementation: string;
        roles: string[];
        rolesAdmins: string[];
        members: string[][];
        daoFunctionDescs: string[];
        daoActionRoles: string[][];
        moduleTargets: string[];
        moduleFunctionDescs: string[];
        moduleActionRoles: string[][];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
