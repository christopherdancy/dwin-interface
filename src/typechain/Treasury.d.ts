/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryInterface extends ethers.utils.Interface {
  functions: {
    "acl()": FunctionFragment;
    "depositERC20Tokens(address[],address[],uint256[])": FunctionFragment;
    "depositERC721Tokens(address[],address[],uint256[])": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "role()": FunctionFragment;
    "withdrawERC20Tokens(address[],address[],uint256[])": FunctionFragment;
    "withdrawERC721Tokens(address[],address[],uint256[])": FunctionFragment;
    "withdrawEth(address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositERC20Tokens",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721Tokens",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "role", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Tokens",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721Tokens",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "role", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;

  events: {
    "ERC20TokensDeposited(address[],address[],uint256[])": EventFragment;
    "ERC20TokensWithdrawn(address[],address[],uint256[])": EventFragment;
    "ERC721TokensDeposited(address[],address[],uint256[])": EventFragment;
    "ERC721TokensWithdrawn(address[],address[],uint256[])": EventFragment;
    "EthDeposited(address,uint256)": EventFragment;
    "EthWithdrawn(address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20TokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721TokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawn"): EventFragment;
}

export type ERC20TokensDepositedEvent = TypedEvent<
  [string[], string[], BigNumber[]] & {
    tokenAddresses: string[];
    senders: string[];
    amounts: BigNumber[];
  }
>;

export type ERC20TokensWithdrawnEvent = TypedEvent<
  [string[], string[], BigNumber[]] & {
    tokenAddresses: string[];
    recipients: string[];
    amounts: BigNumber[];
  }
>;

export type ERC721TokensDepositedEvent = TypedEvent<
  [string[], string[], BigNumber[]] & {
    tokenAddresses: string[];
    senders: string[];
    tokenIds: BigNumber[];
  }
>;

export type ERC721TokensWithdrawnEvent = TypedEvent<
  [string[], string[], BigNumber[]] & {
    tokenAddresses: string[];
    recipients: string[];
    tokenIds: BigNumber[];
  }
>;

export type EthDepositedEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export type EthWithdrawnEvent = TypedEvent<
  [string[], BigNumber[]] & { recipients: string[]; amounts: BigNumber[] }
>;

export class Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryInterface;

  functions: {
    acl(overrides?: CallOverrides): Promise<[string]>;

    depositERC20Tokens(
      tokenAddresses: string[],
      senders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositERC721Tokens(
      tokenAddresses: string[],
      senders: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    role(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC20Tokens(
      tokenAddresses: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721Tokens(
      tokenAddresses: string[],
      recipients: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEth(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acl(overrides?: CallOverrides): Promise<string>;

  depositERC20Tokens(
    tokenAddresses: string[],
    senders: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositERC721Tokens(
    tokenAddresses: string[],
    senders: string[],
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  role(overrides?: CallOverrides): Promise<string>;

  withdrawERC20Tokens(
    tokenAddresses: string[],
    recipients: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721Tokens(
    tokenAddresses: string[],
    recipients: string[],
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEth(
    recipients: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acl(overrides?: CallOverrides): Promise<string>;

    depositERC20Tokens(
      tokenAddresses: string[],
      senders: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721Tokens(
      tokenAddresses: string[],
      senders: string[],
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    role(overrides?: CallOverrides): Promise<string>;

    withdrawERC20Tokens(
      tokenAddresses: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721Tokens(
      tokenAddresses: string[],
      recipients: string[],
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEth(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20TokensDeposited(address[],address[],uint256[])"(
      tokenAddresses?: null,
      senders?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; senders: string[]; amounts: BigNumber[] }
    >;

    ERC20TokensDeposited(
      tokenAddresses?: null,
      senders?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; senders: string[]; amounts: BigNumber[] }
    >;

    "ERC20TokensWithdrawn(address[],address[],uint256[])"(
      tokenAddresses?: null,
      recipients?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; recipients: string[]; amounts: BigNumber[] }
    >;

    ERC20TokensWithdrawn(
      tokenAddresses?: null,
      recipients?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; recipients: string[]; amounts: BigNumber[] }
    >;

    "ERC721TokensDeposited(address[],address[],uint256[])"(
      tokenAddresses?: null,
      senders?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; senders: string[]; tokenIds: BigNumber[] }
    >;

    ERC721TokensDeposited(
      tokenAddresses?: null,
      senders?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; senders: string[]; tokenIds: BigNumber[] }
    >;

    "ERC721TokensWithdrawn(address[],address[],uint256[])"(
      tokenAddresses?: null,
      recipients?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; recipients: string[]; tokenIds: BigNumber[] }
    >;

    ERC721TokensWithdrawn(
      tokenAddresses?: null,
      recipients?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string[], string[], BigNumber[]],
      { tokenAddresses: string[]; recipients: string[]; tokenIds: BigNumber[] }
    >;

    "EthDeposited(address,uint256)"(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    EthDeposited(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    "EthWithdrawn(address[],uint256[])"(
      recipients?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { recipients: string[]; amounts: BigNumber[] }
    >;

    EthWithdrawn(
      recipients?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { recipients: string[]; amounts: BigNumber[] }
    >;
  };

  estimateGas: {
    acl(overrides?: CallOverrides): Promise<BigNumber>;

    depositERC20Tokens(
      tokenAddresses: string[],
      senders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositERC721Tokens(
      tokenAddresses: string[],
      senders: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    role(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20Tokens(
      tokenAddresses: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721Tokens(
      tokenAddresses: string[],
      recipients: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEth(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositERC20Tokens(
      tokenAddresses: string[],
      senders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721Tokens(
      tokenAddresses: string[],
      senders: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20Tokens(
      tokenAddresses: string[],
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721Tokens(
      tokenAddresses: string[],
      recipients: string[],
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
