/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DAO, DAOInterface } from "../DAO";

const _abi = [
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "UnequalArrayLengths",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "accessControl",
    outputs: [
      {
        internalType: "contract IAccessControl",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_accessControl",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b506080516111fa61004c600039600081816101b0015281816101f901528181610299015281816102d9015261036c01526111fa6000f3fe6080604052600436106100705760003560e01c80634f1ef2861161004e5780634f1ef2861461010457806352d1902d14610117578063a516a5bf1461013a578063c4d66de81461015a57600080fd5b806301ffc9a71461007557806313007d55146100aa5780633659cfe6146100e2575b600080fd5b34801561008157600080fd5b50610095610090366004610bfa565b61017a565b60405190151581526020015b60405180910390f35b3480156100b657600080fd5b506065546100ca906001600160a01b031681565b6040516001600160a01b0390911681526020016100a1565b3480156100ee57600080fd5b506101026100fd366004610c40565b6101a5565b005b610102610112366004610c71565b61028e565b34801561012357600080fd5b5061012c61035f565b6040519081526020016100a1565b34801561014657600080fd5b50610102610155366004610d7f565b610412565b34801561016657600080fd5b50610102610175366004610c40565b610630565b60006001600160e01b0319821663a516a5bf60e01b148061019f575061019f8261070c565b92915050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101f75760405162461bcd60e51b81526004016101ee90610e19565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661024060008051602061117e833981519152546001600160a01b031690565b6001600160a01b0316146102665760405162461bcd60e51b81526004016101ee90610e65565b61026f81610741565b6040805160008082526020820190925261028b918391906107e2565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102d75760405162461bcd60e51b81526004016101ee90610e19565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661032060008051602061117e833981519152546001600160a01b031690565b6001600160a01b0316146103465760405162461bcd60e51b81526004016101ee90610e65565b61034f82610741565b61035b828260016107e2565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ff5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016101ee565b5060008051602061117e83398151915290565b6065546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd49061045590339030906001600160e01b03196000351690600401610eb1565b602060405180830381865afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104969190610ede565b6104b35760405163ea8e4eb560e01b815260040160405180910390fd5b84831415806104c25750848114155b156104e0576040516311e86f7360e01b815260040160405180910390fd5b600060405180606001604052806022815260200161115c6022913990508560005b818110156105e4576000808a8a8481811061051e5761051e610f00565b90506020020160208101906105339190610c40565b6001600160a01b031689898581811061054e5761054e610f00565b9050602002013588888681811061056757610567610f00565b90506020028101906105799190610f16565b604051610587929190610f5d565b60006040518083038185875af1925050503d80600081146105c4576040519150601f19603f3d011682016040523d82523d6000602084013e6105c9565b606091505b50915091506105d9828287610952565b505050600101610501565b507f56bfe74cbe37ff0615c4d027adf14b7793c59322d51411a0f5a26eb77abac09588888888888860405161061e96959493929190611027565b60405180910390a15050505050505050565b600054610100900460ff1661064b5760005460ff161561064f565b303b155b6106b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101ee565b600054610100900460ff161580156106d4576000805461ffff19166101011790555b606580546001600160a01b0319166001600160a01b0384161790556106f7610992565b801561035b576000805461ff00191690555050565b60006001600160e01b0319821663d7d610bd60e01b148061019f57506301ffc9a760e01b6001600160e01b031983161461019f565b6065546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd49061078490339030906001600160e01b03196000351690600401610eb1565b602060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190610ede565b61028b5760405163ea8e4eb560e01b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561081a57610815836109ff565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610874575060408051601f3d908101601f19168201909252610871918101906110c7565b60015b6108d75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016101ee565b60008051602061117e83398151915281146109465760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016101ee565b50610815838383610a9b565b6060831561096157508161098b565b8251156109715782518084602001fd5b8160405162461bcd60e51b81526004016101ee919061110c565b9392505050565b600054610100900460ff166109fd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016101ee565b565b6001600160a01b0381163b610a6c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101ee565b60008051602061117e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610aa483610ac6565b600082511180610ab15750805b1561081557610ac08383610b06565b50505050565b610acf816109ff565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610b6e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101ee565b600080846001600160a01b031684604051610b89919061113f565b600060405180830381855af49150503d8060008114610bc4576040519150601f19603f3d011682016040523d82523d6000602084013e610bc9565b606091505b5091509150610bf1828260405180606001604052806027815260200161119e60279139610952565b95945050505050565b600060208284031215610c0c57600080fd5b81356001600160e01b03198116811461098b57600080fd5b80356001600160a01b0381168114610c3b57600080fd5b919050565b600060208284031215610c5257600080fd5b61098b82610c24565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610c8457600080fd5b610c8d83610c24565b9150602083013567ffffffffffffffff80821115610caa57600080fd5b818501915085601f830112610cbe57600080fd5b813581811115610cd057610cd0610c5b565b604051601f8201601f19908116603f01168101908382118183101715610cf857610cf8610c5b565b81604052828152886020848701011115610d1157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008083601f840112610d4557600080fd5b50813567ffffffffffffffff811115610d5d57600080fd5b6020830191508360208260051b8501011115610d7857600080fd5b9250929050565b60008060008060008060608789031215610d9857600080fd5b863567ffffffffffffffff80821115610db057600080fd5b610dbc8a838b01610d33565b90985096506020890135915080821115610dd557600080fd5b610de18a838b01610d33565b90965094506040890135915080821115610dfa57600080fd5b50610e0789828a01610d33565b979a9699509497509295939492505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b600060208284031215610ef057600080fd5b8151801515811461098b57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610f2d57600080fd5b83018035915067ffffffffffffffff821115610f4857600080fd5b602001915036819003821315610d7857600080fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b8781101561101a5782840389528135601e19883603018112610fd157600080fd5b8701803567ffffffffffffffff811115610fea57600080fd5b803603891315610ff957600080fd5b6110068682898501610f6d565b9a87019a9550505090840190600101610fb0565b5091979650505050505050565b6060808252810186905260008760808301825b89811015611068576001600160a01b0361105384610c24565b1682526020928301929091019060010161103a565b5083810360208501528681526001600160fb1b0387111561108857600080fd5b8660051b915081886020830137818101915050602081016000815260208483030160408501526110b9818688610f96565b9a9950505050505050505050565b6000602082840312156110d957600080fd5b5051919050565b60005b838110156110fb5781810151838201526020016110e3565b83811115610ac05750506000910152565b602081526000825180602084015261112b8160408501602087016110e0565b601f01601f19169190910160400192915050565b600082516111518184602087016110e0565b919091019291505056fe44414f3a2063616c6c20726576657274656420776974686f7574206d657373616765360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122048e643d22a1c83126a321f5eba80562f17ff62bd5e20143189f3e28ff0af9e1764736f6c634300080b0033";

export class DAO__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DAO> {
    return super.deploy(overrides || {}) as Promise<DAO>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DAO {
    return super.attach(address) as DAO;
  }
  connect(signer: Signer): DAO__factory {
    return super.connect(signer) as DAO__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAOInterface {
    return new utils.Interface(_abi) as DAOInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DAO {
    return new Contract(address, _abi, signerOrProvider) as DAO;
  }
}
