/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BravoFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createDAOAndToken(((address,address[],address[],string,uint256,uint64,uint256,uint256,uint256,uint256),address,string,string,uint256,address[],uint256[]))": FunctionFragment;
    "createDAOBringToken(((address,address[],address[],string,uint256,uint64,uint256,uint256,uint256,uint256),address))": FunctionFragment;
    "createDAOWrapToken(((address,address[],address[],string,uint256,uint64,uint256,uint256,uint256,uint256),address,address,string,string))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createDAOAndToken",
    values: [
      {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenName: string;
        tokenSymbol: string;
        tokenTotalSupply: BigNumberish;
        hodlers: string[];
        allocations: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDAOBringToken",
    values: [
      {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenAddress: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDAOWrapToken",
    values: [
      {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenAddress: string;
        tokenName: string;
        tokenSymbol: string;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDAOAndToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDAOBringToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDAOWrapToken",
    data: BytesLike
  ): Result;

  events: {
    "DAODeployed(address,address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAODeployed"): EventFragment;
}

export type DAODeployedEvent = TypedEvent<
  [string, string, string, string, string] & {
    deployer: string;
    votingToken: string;
    timelockController: string;
    daoProxy: string;
    acl: string;
  }
>;

export class BravoFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BravoFactoryInterface;

  functions: {
    createDAOAndToken(
      createDAOAndTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenName: string;
        tokenSymbol: string;
        tokenTotalSupply: BigNumberish;
        hodlers: string[];
        allocations: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDAOBringToken(
      createDAOBringTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDAOWrapToken(
      createDAOWrapTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenAddress: string;
        tokenName: string;
        tokenSymbol: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createDAOAndToken(
    createDAOAndTokenParameters: {
      createDAOParameters: {
        governanceImplementation: string;
        proposers: string[];
        executors: string[];
        daoName: string;
        minDelay: BigNumberish;
        initialVoteExtension: BigNumberish;
        initialVotingDelay: BigNumberish;
        initialVotingPeriod: BigNumberish;
        initialProposalThreshold: BigNumberish;
        initialQuorumNumeratorValue: BigNumberish;
      };
      tokenFactory: string;
      tokenName: string;
      tokenSymbol: string;
      tokenTotalSupply: BigNumberish;
      hodlers: string[];
      allocations: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDAOBringToken(
    createDAOBringTokenParameters: {
      createDAOParameters: {
        governanceImplementation: string;
        proposers: string[];
        executors: string[];
        daoName: string;
        minDelay: BigNumberish;
        initialVoteExtension: BigNumberish;
        initialVotingDelay: BigNumberish;
        initialVotingPeriod: BigNumberish;
        initialProposalThreshold: BigNumberish;
        initialQuorumNumeratorValue: BigNumberish;
      };
      tokenAddress: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDAOWrapToken(
    createDAOWrapTokenParameters: {
      createDAOParameters: {
        governanceImplementation: string;
        proposers: string[];
        executors: string[];
        daoName: string;
        minDelay: BigNumberish;
        initialVoteExtension: BigNumberish;
        initialVotingDelay: BigNumberish;
        initialVotingPeriod: BigNumberish;
        initialProposalThreshold: BigNumberish;
        initialQuorumNumeratorValue: BigNumberish;
      };
      tokenFactory: string;
      tokenAddress: string;
      tokenName: string;
      tokenSymbol: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createDAOAndToken(
      createDAOAndTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenName: string;
        tokenSymbol: string;
        tokenTotalSupply: BigNumberish;
        hodlers: string[];
        allocations: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    createDAOBringToken(
      createDAOBringTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    createDAOWrapToken(
      createDAOWrapTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenAddress: string;
        tokenName: string;
        tokenSymbol: string;
      },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;
  };

  filters: {
    "DAODeployed(address,address,address,address,address)"(
      deployer?: null,
      votingToken?: null,
      timelockController?: null,
      daoProxy?: null,
      acl?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        deployer: string;
        votingToken: string;
        timelockController: string;
        daoProxy: string;
        acl: string;
      }
    >;

    DAODeployed(
      deployer?: null,
      votingToken?: null,
      timelockController?: null,
      daoProxy?: null,
      acl?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        deployer: string;
        votingToken: string;
        timelockController: string;
        daoProxy: string;
        acl: string;
      }
    >;
  };

  estimateGas: {
    createDAOAndToken(
      createDAOAndTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenName: string;
        tokenSymbol: string;
        tokenTotalSupply: BigNumberish;
        hodlers: string[];
        allocations: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDAOBringToken(
      createDAOBringTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDAOWrapToken(
      createDAOWrapTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenAddress: string;
        tokenName: string;
        tokenSymbol: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDAOAndToken(
      createDAOAndTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenName: string;
        tokenSymbol: string;
        tokenTotalSupply: BigNumberish;
        hodlers: string[];
        allocations: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDAOBringToken(
      createDAOBringTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDAOWrapToken(
      createDAOWrapTokenParameters: {
        createDAOParameters: {
          governanceImplementation: string;
          proposers: string[];
          executors: string[];
          daoName: string;
          minDelay: BigNumberish;
          initialVoteExtension: BigNumberish;
          initialVotingDelay: BigNumberish;
          initialVotingPeriod: BigNumberish;
          initialProposalThreshold: BigNumberish;
          initialQuorumNumeratorValue: BigNumberish;
        };
        tokenFactory: string;
        tokenAddress: string;
        tokenName: string;
        tokenSymbol: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
