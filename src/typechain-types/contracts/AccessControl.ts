/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AccessControlInterface extends utils.Interface {
  functions: {
    "DAO_ROLE()": FunctionFragment;
    "actionIsAuthorized(address,address,bytes4)": FunctionFragment;
    "addActionsRoles(address[],string[],string[][])": FunctionFragment;
    "getActionRoles(address,string)": FunctionFragment;
    "getRoleAdmin(string)": FunctionFragment;
    "grantRole(string,address)": FunctionFragment;
    "grantRolesAndAdmins(string[],string[],address[][])": FunctionFragment;
    "hasRole(string,address)": FunctionFragment;
    "initialize(address,string[],string[],address[][],address[],string[],string[][])": FunctionFragment;
    "isRoleAuthorized(string,address,string)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeActionsRoles(address[],string[],string[][])": FunctionFragment;
    "renounceRole(string,address)": FunctionFragment;
    "revokeRole(string,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DAO_ROLE"
      | "actionIsAuthorized"
      | "addActionsRoles"
      | "getActionRoles"
      | "getRoleAdmin"
      | "grantRole"
      | "grantRolesAndAdmins"
      | "hasRole"
      | "initialize"
      | "isRoleAuthorized"
      | "proxiableUUID"
      | "removeActionsRoles"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DAO_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "actionIsAuthorized",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addActionsRoles",
    values: [string[], string[], string[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionRoles",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRolesAndAdmins",
    values: [string[], string[], string[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string[],
      string[],
      string[][],
      string[],
      string[],
      string[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoleAuthorized",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeActionsRoles",
    values: [string[], string[], string[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "DAO_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "actionIsAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addActionsRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRolesAndAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRoleAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeActionsRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "ActionRoleAdded(address,string,bytes4,string)": EventFragment;
    "ActionRoleRemoved(address,string,bytes4,string)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "RoleAdminChanged(string,string,string)": EventFragment;
    "RoleGranted(string,address,address)": EventFragment;
    "RoleRevoked(string,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionRoleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionRoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface ActionRoleAddedEventObject {
  target: string;
  functionDesc: string;
  encodedSig: string;
  role: string;
}
export type ActionRoleAddedEvent = TypedEvent<
  [string, string, string, string],
  ActionRoleAddedEventObject
>;

export type ActionRoleAddedEventFilter = TypedEventFilter<ActionRoleAddedEvent>;

export interface ActionRoleRemovedEventObject {
  target: string;
  functionDesc: string;
  encodedSig: string;
  role: string;
}
export type ActionRoleRemovedEvent = TypedEvent<
  [string, string, string, string],
  ActionRoleRemovedEventObject
>;

export type ActionRoleRemovedEventFilter =
  TypedEventFilter<ActionRoleRemovedEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  adminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  admin: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  admin: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AccessControl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccessControlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAO_ROLE(overrides?: CallOverrides): Promise<[string]>;

    actionIsAuthorized(
      caller: string,
      target: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isAuthorized: boolean }>;

    addActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActionRoles(
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { roles: string[] }>;

    getRoleAdmin(role: string, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRolesAndAdmins(
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      dao: string,
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      targets: string[],
      functionDescs: string[],
      actionRoles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRoleAuthorized(
      role: string,
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isAuthorized: boolean }>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAO_ROLE(overrides?: CallOverrides): Promise<string>;

  actionIsAuthorized(
    caller: string,
    target: string,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addActionsRoles(
    targets: string[],
    functionDescs: string[],
    roles: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActionRoles(
    target: string,
    functionDesc: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoleAdmin(role: string, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRolesAndAdmins(
    roles: string[],
    roleAdmins: string[],
    members: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    dao: string,
    roles: string[],
    roleAdmins: string[],
    members: string[][],
    targets: string[],
    functionDescs: string[],
    actionRoles: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRoleAuthorized(
    role: string,
    target: string,
    functionDesc: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeActionsRoles(
    targets: string[],
    functionDescs: string[],
    roles: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAO_ROLE(overrides?: CallOverrides): Promise<string>;

    actionIsAuthorized(
      caller: string,
      target: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    getActionRoles(
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleAdmin(role: string, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRolesAndAdmins(
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      dao: string,
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      targets: string[],
      functionDescs: string[],
      actionRoles: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    isRoleAuthorized(
      role: string,
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActionRoleAdded(address,string,bytes4,string)"(
      target?: null,
      functionDesc?: null,
      encodedSig?: null,
      role?: null
    ): ActionRoleAddedEventFilter;
    ActionRoleAdded(
      target?: null,
      functionDesc?: null,
      encodedSig?: null,
      role?: null
    ): ActionRoleAddedEventFilter;

    "ActionRoleRemoved(address,string,bytes4,string)"(
      target?: null,
      functionDesc?: null,
      encodedSig?: null,
      role?: null
    ): ActionRoleRemovedEventFilter;
    ActionRoleRemoved(
      target?: null,
      functionDesc?: null,
      encodedSig?: null,
      role?: null
    ): ActionRoleRemovedEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "RoleAdminChanged(string,string,string)"(
      role?: null,
      previousAdminRole?: null,
      adminRole?: null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: null,
      previousAdminRole?: null,
      adminRole?: null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(string,address,address)"(
      role?: null,
      account?: null,
      admin?: null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: null,
      account?: null,
      admin?: null
    ): RoleGrantedEventFilter;

    "RoleRevoked(string,address,address)"(
      role?: null,
      account?: null,
      admin?: null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: null,
      account?: null,
      admin?: null
    ): RoleRevokedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DAO_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    actionIsAuthorized(
      caller: string,
      target: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActionRoles(
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: string, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRolesAndAdmins(
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      dao: string,
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      targets: string[],
      functionDescs: string[],
      actionRoles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRoleAuthorized(
      role: string,
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAO_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    actionIsAuthorized(
      caller: string,
      target: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActionRoles(
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRolesAndAdmins(
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      dao: string,
      roles: string[],
      roleAdmins: string[],
      members: string[][],
      targets: string[],
      functionDescs: string[],
      actionRoles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRoleAuthorized(
      role: string,
      target: string,
      functionDesc: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeActionsRoles(
      targets: string[],
      functionDescs: string[],
      roles: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
