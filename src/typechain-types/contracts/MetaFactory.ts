/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IDAOFactory {
  export type CreateDAOParamsStruct = {
    daoImplementation: string;
    accessControlImplementation: string;
    daoName: string;
    roles: string[];
    rolesAdmins: string[];
    members: string[][];
    daoFunctionDescs: string[];
    daoActionRoles: string[][];
    moduleTargets: string[];
    moduleFunctionDescs: string[];
    moduleActionRoles: string[][];
  };

  export type CreateDAOParamsStructOutput = [
    string,
    string,
    string,
    string[],
    string[],
    string[][],
    string[],
    string[][],
    string[],
    string[],
    string[][]
  ] & {
    daoImplementation: string;
    accessControlImplementation: string;
    daoName: string;
    roles: string[];
    rolesAdmins: string[];
    members: string[][];
    daoFunctionDescs: string[];
    daoActionRoles: string[][];
    moduleTargets: string[];
    moduleFunctionDescs: string[];
    moduleActionRoles: string[][];
  };
}

export declare namespace IGovernorFactory {
  export type CreateGovernorParamsStruct = {
    _govImpl: string;
    _token: string;
    _timelockImpl: string;
    _name: string;
    _initialVoteExtension: BigNumberish;
    _initialVotingDelay: BigNumberish;
    _initialVotingPeriod: BigNumberish;
    _initialProposalThreshold: BigNumberish;
    _initialQuorumNumeratorValue: BigNumberish;
    _minDelay: BigNumberish;
  };

  export type CreateGovernorParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    _govImpl: string;
    _token: string;
    _timelockImpl: string;
    _name: string;
    _initialVoteExtension: BigNumber;
    _initialVotingDelay: BigNumber;
    _initialVotingPeriod: BigNumber;
    _initialProposalThreshold: BigNumber;
    _initialQuorumNumeratorValue: BigNumber;
    _minDelay: BigNumber;
  };
}

export interface MetaFactoryInterface extends utils.Interface {
  functions: {
    "createDAOAndModules(address,address,address,address,(address,address,string,string[],string[],address[][],string[],string[][],address[],string[],string[][]),(address,address,address,string,uint64,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createDAOAndModules" | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createDAOAndModules",
    values: [
      string,
      string,
      string,
      string,
      IDAOFactory.CreateDAOParamsStruct,
      IGovernorFactory.CreateGovernorParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDAOAndModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MetaFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createDAOAndModules(
      daoFactory: string,
      governorFactory: string,
      treasuryFactory: string,
      treasuryImplementation: string,
      createDAOParams: IDAOFactory.CreateDAOParamsStruct,
      createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createDAOAndModules(
    daoFactory: string,
    governorFactory: string,
    treasuryFactory: string,
    treasuryImplementation: string,
    createDAOParams: IDAOFactory.CreateDAOParamsStruct,
    createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createDAOAndModules(
      daoFactory: string,
      governorFactory: string,
      treasuryFactory: string,
      treasuryImplementation: string,
      createDAOParams: IDAOFactory.CreateDAOParamsStruct,
      createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        dao: string;
        accessControl: string;
        timelock: string;
        governor: string;
        treasury: string;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    createDAOAndModules(
      daoFactory: string,
      governorFactory: string,
      treasuryFactory: string,
      treasuryImplementation: string,
      createDAOParams: IDAOFactory.CreateDAOParamsStruct,
      createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDAOAndModules(
      daoFactory: string,
      governorFactory: string,
      treasuryFactory: string,
      treasuryImplementation: string,
      createDAOParams: IDAOFactory.CreateDAOParamsStruct,
      createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
