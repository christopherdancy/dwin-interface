/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IGovernorFactory {
  export type CreateGovernorParamsStruct = {
    _govImpl: string;
    _token: string;
    _timelockImpl: string;
    _name: string;
    _initialVoteExtension: BigNumberish;
    _initialVotingDelay: BigNumberish;
    _initialVotingPeriod: BigNumberish;
    _initialProposalThreshold: BigNumberish;
    _initialQuorumNumeratorValue: BigNumberish;
    _minDelay: BigNumberish;
  };

  export type CreateGovernorParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    _govImpl: string;
    _token: string;
    _timelockImpl: string;
    _name: string;
    _initialVoteExtension: BigNumber;
    _initialVotingDelay: BigNumber;
    _initialVotingPeriod: BigNumber;
    _initialProposalThreshold: BigNumber;
    _initialQuorumNumeratorValue: BigNumber;
    _minDelay: BigNumber;
  };
}

export interface IGovernorFactoryInterface extends utils.Interface {
  functions: {
    "createGovernor(address,address,(address,address,address,string,uint64,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "createGovernor"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGovernor",
    values: [string, string, IGovernorFactory.CreateGovernorParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createGovernor",
    data: BytesLike
  ): Result;

  events: {
    "GovernorCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernorCreated"): EventFragment;
}

export interface GovernorCreatedEventObject {
  timelock: string;
  governorModule: string;
}
export type GovernorCreatedEvent = TypedEvent<
  [string, string],
  GovernorCreatedEventObject
>;

export type GovernorCreatedEventFilter = TypedEventFilter<GovernorCreatedEvent>;

export interface IGovernorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGovernorFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGovernor(
      _dao: string,
      _accessControl: string,
      _createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createGovernor(
    _dao: string,
    _accessControl: string,
    _createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGovernor(
      _dao: string,
      _accessControl: string,
      _createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string, string] & { timelock: string; governorModule: string }>;
  };

  filters: {
    "GovernorCreated(address,address)"(
      timelock?: null,
      governorModule?: null
    ): GovernorCreatedEventFilter;
    GovernorCreated(
      timelock?: null,
      governorModule?: null
    ): GovernorCreatedEventFilter;
  };

  estimateGas: {
    createGovernor(
      _dao: string,
      _accessControl: string,
      _createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGovernor(
      _dao: string,
      _accessControl: string,
      _createGovernorParams: IGovernorFactory.CreateGovernorParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
