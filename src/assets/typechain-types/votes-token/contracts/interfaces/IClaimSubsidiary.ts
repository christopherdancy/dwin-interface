/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IClaimSubsidiaryInterface extends utils.Interface {
  functions: {
    "calculateClaimAmount(address)": FunctionFragment;
    "claimSnap(address)": FunctionFragment;
    "initialize(address,address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "calculateClaimAmount" | "claimSnap" | "initialize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateClaimAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claimSnap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimSnap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {
    "SnapAdded(address,address,uint256)": EventFragment;
    "SnapClaimed(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SnapAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SnapClaimed"): EventFragment;
}

export interface SnapAddedEventObject {
  pToken: string;
  cToken: string;
  pAllocation: BigNumber;
}
export type SnapAddedEvent = TypedEvent<
  [string, string, BigNumber],
  SnapAddedEventObject
>;

export type SnapAddedEventFilter = TypedEventFilter<SnapAddedEvent>;

export interface SnapClaimedEventObject {
  pToken: string;
  cToken: string;
  claimer: string;
  amount: BigNumber;
}
export type SnapClaimedEvent = TypedEvent<
  [string, string, string, BigNumber],
  SnapClaimedEventObject
>;

export type SnapClaimedEventFilter = TypedEventFilter<SnapClaimedEvent>;

export interface IClaimSubsidiary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClaimSubsidiaryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateClaimAmount(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cTokenAllocation: BigNumber }>;

    claimSnap(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _metaFactory: string,
      _accessControl: string,
      _pToken: string,
      _cToken: string,
      _pAllocation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateClaimAmount(
    claimer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimSnap(
    claimer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _metaFactory: string,
    _accessControl: string,
    _pToken: string,
    _cToken: string,
    _pAllocation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateClaimAmount(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimSnap(claimer: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      _metaFactory: string,
      _accessControl: string,
      _pToken: string,
      _cToken: string,
      _pAllocation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SnapAdded(address,address,uint256)"(
      pToken?: null,
      cToken?: null,
      pAllocation?: null
    ): SnapAddedEventFilter;
    SnapAdded(
      pToken?: null,
      cToken?: null,
      pAllocation?: null
    ): SnapAddedEventFilter;

    "SnapClaimed(address,address,address,uint256)"(
      pToken?: string | null,
      cToken?: string | null,
      claimer?: string | null,
      amount?: null
    ): SnapClaimedEventFilter;
    SnapClaimed(
      pToken?: string | null,
      cToken?: string | null,
      claimer?: string | null,
      amount?: null
    ): SnapClaimedEventFilter;
  };

  estimateGas: {
    calculateClaimAmount(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimSnap(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _metaFactory: string,
      _accessControl: string,
      _pToken: string,
      _cToken: string,
      _pAllocation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateClaimAmount(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimSnap(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _metaFactory: string,
      _accessControl: string,
      _pToken: string,
      _cToken: string,
      _pAllocation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
