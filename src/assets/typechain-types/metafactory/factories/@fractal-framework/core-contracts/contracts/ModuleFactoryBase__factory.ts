/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ModuleFactoryBase,
  ModuleFactoryBaseInterface,
} from "../../../../@fractal-framework/core-contracts/contracts/ModuleFactoryBase";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "semanticVersion",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "frontendURI",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "VersionCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_semanticVersion",
        type: "string",
      },
      {
        internalType: "string",
        name: "_frontendURI",
        type: "string",
      },
      {
        internalType: "address",
        name: "_impl",
        type: "address",
      },
    ],
    name: "addVersion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "versionControl",
    outputs: [
      {
        internalType: "string",
        name: "semanticVersion",
        type: "string",
      },
      {
        internalType: "string",
        name: "frontendURI",
        type: "string",
      },
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ModuleFactoryBase__factory {
  static readonly abi = _abi;
  static createInterface(): ModuleFactoryBaseInterface {
    return new utils.Interface(_abi) as ModuleFactoryBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ModuleFactoryBase {
    return new Contract(address, _abi, signerOrProvider) as ModuleFactoryBase;
  }
}
