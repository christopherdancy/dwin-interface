/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MetaFactory,
  MetaFactoryInterface,
} from "../../contracts/MetaFactory";

const _abi = [
  {
    inputs: [],
    name: "UnequalArrayLengths",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "daoAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accessControl",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "DAOCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "daoFactory",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "daoImplementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "accessControlImplementation",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "daoName",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "roles",
            type: "string[]",
          },
          {
            internalType: "string[]",
            name: "rolesAdmins",
            type: "string[]",
          },
          {
            internalType: "address[][]",
            name: "members",
            type: "address[][]",
          },
          {
            internalType: "string[]",
            name: "daoFunctionDescs",
            type: "string[]",
          },
          {
            internalType: "string[][]",
            name: "daoActionRoles",
            type: "string[][]",
          },
        ],
        internalType: "struct IDAOFactory.CreateDAOParams",
        name: "createDAOParams",
        type: "tuple",
      },
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
    ],
    name: "createDAOAndExecute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610de4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b57806308e5657114610062575b600080fd5b61004e61004936600461035d565b610077565b604051901515815260200160405180910390f35b6100756100703660046106fd565b6100ae565b005b60006001600160e01b031982166308e5657160e01b14806100a857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6100b888886100d0565b6100c6868686868686610197565b5050505050505050565b600080836001600160a01b0316635e13cf2b33856040518363ffffffff1660e01b8152600401610101929190610a50565b60408051808303816000875af115801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190610b5e565b91509150336001600160a01b0316816001600160a01b0316836001600160a01b03167f552b78c92c2932581cee967b6925eea60f5d345efa257d0432a333a6b55dc2b160405160405180910390a450505050565b84831415806101a65750848114155b156101c4576040516311e86f7360e01b815260040160405180910390fd5b60006040518060600160405280602a8152602001610d85602a913990508560005b818110156102c8576000808a8a8481811061020257610202610b98565b90506020020160208101906102179190610bae565b6001600160a01b031689898581811061023257610232610b98565b9050602002013588888681811061024b5761024b610b98565b905060200281019061025d9190610bcb565b60405161026b929190610c12565b60006040518083038185875af1925050503d80600081146102a8576040519150601f19603f3d011682016040523d82523d6000602084013e6102ad565b606091505b50915091506102bd828287610314565b5050506001016101e5565b507f56bfe74cbe37ff0615c4d027adf14b7793c59322d51411a0f5a26eb77abac09588888888888860405161030296959493929190610ccf565b60405180910390a15050505050505050565b60608315610323575081610356565b8251156103335782518084602001fd5b8160405162461bcd60e51b815260040161034d9190610d71565b60405180910390fd5b9392505050565b60006020828403121561036f57600080fd5b81356001600160e01b03198116811461035657600080fd5b6001600160a01b038116811461039c57600080fd5b50565b80356103aa81610387565b919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156103e9576103e96103af565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610418576104186103af565b604052919050565b600082601f83011261043157600080fd5b813567ffffffffffffffff81111561044b5761044b6103af565b61045e601f8201601f19166020016103ef565b81815284602083860101111561047357600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156104aa576104aa6103af565b5060051b60200190565b600082601f8301126104c557600080fd5b813560206104da6104d583610490565b6103ef565b82815260059290921b840181019181810190868411156104f957600080fd5b8286015b8481101561053957803567ffffffffffffffff81111561051d5760008081fd5b61052b8986838b0101610420565b8452509183019183016104fd565b509695505050505050565b600082601f83011261055557600080fd5b813560206105656104d583610490565b828152600592831b850182019282820191908785111561058457600080fd5b8387015b8581101561062457803567ffffffffffffffff8111156105a85760008081fd5b8801603f81018a136105ba5760008081fd5b8581013560406105cc6104d583610490565b82815291851b8301810191888101908d8411156105e95760008081fd5b938201935b83851015610613578435925061060383610387565b82825293890193908901906105ee565b885250505093850193508401610588565b5090979650505050505050565b600082601f83011261064257600080fd5b813560206106526104d583610490565b82815260059290921b8401810191818101908684111561067157600080fd5b8286015b8481101561053957803567ffffffffffffffff8111156106955760008081fd5b6106a38986838b01016104b4565b845250918301918301610675565b60008083601f8401126106c357600080fd5b50813567ffffffffffffffff8111156106db57600080fd5b6020830191508360208260051b85010111156106f657600080fd5b9250929050565b60008060008060008060008060a0898b03121561071957600080fd5b883561072481610387565b9750602089013567ffffffffffffffff8082111561074157600080fd5b908a0190610120828d03121561075657600080fd5b61075e6103c5565b6107678361039f565b81526107756020840161039f565b60208201526040830135604082015260608301358281111561079657600080fd5b6107a28e828601610420565b6060830152506080830135828111156107ba57600080fd5b6107c68e8286016104b4565b60808301525060a0830135828111156107de57600080fd5b6107ea8e8286016104b4565b60a08301525060c08301358281111561080257600080fd5b61080e8e828601610544565b60c08301525060e08301358281111561082657600080fd5b6108328e8286016104b4565b60e083015250610100808401358381111561084c57600080fd5b6108588f828701610631565b8284015250508099505060408b013591508082111561087657600080fd5b6108828c838d016106b1565b909850965060608b013591508082111561089b57600080fd5b6108a78c838d016106b1565b909650945060808b01359150808211156108c057600080fd5b506108cd8b828c016106b1565b999c989b5096995094979396929594505050565b6000815180845260005b81811015610907576020818501810151868301820152016108eb565b81811115610919576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156109765782840389526109648483516108e1565b9885019893509084019060010161094c565b5091979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156109fa578385038a52825180518087529087019087870190845b818110156109e55783516001600160a01b0316835292890192918901916001016109c0565b50509a87019a955050918501916001016109a2565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015610976578284038952610a3e84835161092e565b98850198935090840190600101610a26565b6001600160a01b03831681526040602082018190528251610a7b918301906001600160a01b03169052565b60006020830151610a9760608401826001600160a01b03169052565b506040830151608083015260608301516101208060a0850152610abe6101608501836108e1565b91506080850151603f19808685030160c0870152610adc848361092e565b935060a08701519150808685030160e0870152610af9848361092e565b935060c08701519150610100818786030181880152610b188584610983565b945060e08801519250818786030184880152610b34858461092e565b94508088015193505080868503016101408701525050610b548282610a08565b9695505050505050565b60008060408385031215610b7157600080fd5b8251610b7c81610387565b6020840151909250610b8d81610387565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610bc057600080fd5b813561035681610387565b6000808335601e19843603018112610be257600080fd5b83018035915067ffffffffffffffff821115610bfd57600080fd5b6020019150368190038213156106f657600080fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156109765782840389528135601e19883603018112610c8657600080fd5b8701803567ffffffffffffffff811115610c9f57600080fd5b803603891315610cae57600080fd5b610cbb8682898501610c22565b9a87019a9550505090840190600101610c65565b6060808252810186905260008760808301825b89811015610d12578235610cf581610387565b6001600160a01b0316825260209283019290910190600101610ce2565b5083810360208501528681526001600160fb1b03871115610d3257600080fd5b8660051b91508188602083013781810191505060208101600081526020848303016040850152610d63818688610c4b565b9a9950505050505050505050565b60208152600061035660208301846108e156fe4d657461466163746f72793a2063616c6c20726576657274656420776974686f7574206d657373616765a2646970667358221220a0d0d520d6bce586df6b809e1d86fabcf5a2bbcc8a6a7161de953db4247bebfa64736f6c634300080d0033";

type MetaFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaFactory__factory extends ContractFactory {
  constructor(...args: MetaFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MetaFactory> {
    return super.deploy(overrides || {}) as Promise<MetaFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaFactory {
    return super.attach(address) as MetaFactory;
  }
  override connect(signer: Signer): MetaFactory__factory {
    return super.connect(signer) as MetaFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaFactoryInterface {
    return new utils.Interface(_abi) as MetaFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaFactory {
    return new Contract(address, _abi, signerOrProvider) as MetaFactory;
  }
}
