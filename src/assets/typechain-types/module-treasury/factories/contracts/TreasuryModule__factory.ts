/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TreasuryModule,
  TreasuryModuleInterface,
} from "../../contracts/TreasuryModule";

const _abi = [
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "UnequalArrayLengths",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "ERC20TokensDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "ERC20TokensWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "ERC721TokensDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "ERC721TokensWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EthDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "EthWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "accessControl",
    outputs: [
      {
        internalType: "contract IDAOAccessControl",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "depositERC20Tokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "depositERC721Tokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_accessControl",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "moduleFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "withdrawERC20Tokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "withdrawERC721Tokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "withdrawEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b50608051611fb161004c600039600081816105c001528181610609015281816106a8015281816106e8015261077b0152611fb16000f3fe6080604052600436106100e15760003560e01c806352d1902d1161007f578063c20eaa1211610059578063c20eaa12146102b0578063c4d66de8146102d0578063ce3ebbad146102f0578063fb1d100e1461031057600080fd5b806352d1902d1461024d5780638991255b146102705780639ae6b5be1461029057600080fd5b8063150b7a02116100bb578063150b7a02146101b457806316633fa8146101f85780633659cfe61461021a5780634f1ef2861461023a57600080fd5b806301ffc9a71461012557806306fdde031461015a57806313007d551461017c57600080fd5b3661012057604080513381523460208201527f66ff7c8f71ccc7c36152a41920d0d3b46ef3034359f76aa1498ed4478c204b5c910160405180910390a1005b600080fd5b34801561013157600080fd5b506101456101403660046118fe565b610330565b60405190151581526020015b60405180910390f35b34801561016657600080fd5b5061016f610370565b6040516101519190611954565b34801561018857600080fd5b5060665461019c906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b3480156101c057600080fd5b506101df6101cf366004611a46565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610151565b34801561020457600080fd5b50610218610213366004611afa565b610402565b005b34801561022657600080fd5b50610218610235366004611b94565b6105b6565b610218610248366004611baf565b61069e565b34801561025957600080fd5b5061026261076e565b604051908152602001610151565b34801561027c57600080fd5b5060675461019c906001600160a01b031681565b34801561029c57600080fd5b506102186102ab366004611afa565b610821565b3480156102bc57600080fd5b506102186102cb366004611afa565b610a1f565b3480156102dc57600080fd5b506102186102eb366004611b94565b610c1d565b3480156102fc57600080fd5b5061021861030b366004611afa565b610d18565b34801561031c57600080fd5b5061021861032b366004611bfd565b610eb0565b60006301ffc9a760e01b6001600160e01b03198316148061036a57506001600160e01b0319821660009081526065602052604090205460ff165b92915050565b60606068805461037f90611c69565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab90611c69565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b5050505050905090565b6066546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd49061044590339030906001600160e01b03196000351690600401611ca3565b602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190611cd0565b6104a35760405163ea8e4eb560e01b815260040160405180910390fd5b84831415806104b25750848114155b156104d0576040516311e86f7360e01b815260040160405180910390fd5b8460005b8181101561056b576105568686838181106104f1576104f1611cf2565b90506020020160208101906105069190611b94565b85858481811061051857610518611cf2565b905060200201358a8a8581811061053157610531611cf2565b90506020020160208101906105469190611b94565b6001600160a01b03169190611042565b6001018061056381611d08565b9150506104d4565b507f279ee69c859e439f9c0a143eba32e0a9c0dd4ccab6f0f0f7b5df1a4c73eb2f8f8787878787876040516105a596959493929190611dac565b60405180910390a150505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106075760405162461bcd60e51b81526004016105fe90611df5565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610650600080516020611f35833981519152546001600160a01b031690565b6001600160a01b0316146106765760405162461bcd60e51b81526004016105fe90611e41565b61067f816110aa565b6040805160008082526020820190925261069b9183919061114b565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106e65760405162461bcd60e51b81526004016105fe90611df5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661072f600080516020611f35833981519152546001600160a01b031690565b6001600160a01b0316146107555760405162461bcd60e51b81526004016105fe90611e41565b61075e826110aa565b61076a8282600161114b565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461080e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105fe565b50600080516020611f3583398151915290565b6066546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd49061086490339030906001600160e01b03196000351690600401611ca3565b602060405180830381865afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190611cd0565b6108c25760405163ea8e4eb560e01b815260040160405180910390fd5b84831415806108d15750848114155b156108ef576040516311e86f7360e01b815260040160405180910390fd5b8460005b818110156109e55787878281811061090d5761090d611cf2565b90506020020160208101906109229190611b94565b6001600160a01b03166342842e0e87878481811061094257610942611cf2565b90506020020160208101906109579190611b94565b3087878681811061096a5761096a611cf2565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156109c157600080fd5b505af11580156109d5573d6000803e3d6000fd5b5050600190920191506108f39050565b507f62e602fa7b8d1849d67c000a48e0e1d8a1046aadd78b524ffba8e69ad277f8b38787878787876040516105a596959493929190611dac565b6066546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd490610a6290339030906001600160e01b03196000351690600401611ca3565b602060405180830381865afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190611cd0565b610ac05760405163ea8e4eb560e01b815260040160405180910390fd5b8483141580610acf5750848114155b15610aed576040516311e86f7360e01b815260040160405180910390fd5b8460005b81811015610be357878782818110610b0b57610b0b611cf2565b9050602002016020810190610b209190611b94565b6001600160a01b03166342842e0e30888885818110610b4157610b41611cf2565b9050602002016020810190610b569190611b94565b878786818110610b6857610b68611cf2565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b505060019092019150610af19050565b507f098a00c78513360f53ddec2fba6ff5cee156eeae8fcb72797988acb497611c0e8787878787876040516105a596959493929190611dac565b600054610100900460ff16610c385760005460ff1615610c3c565b303b155b610c9f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105fe565b600054610100900460ff16158015610cc1576000805461ffff19166101011790555b610cf382336040518060400160405280600f81526020016e5472656173757279204d6f64756c6560881b8152506112b6565b610d0363bf7ee64f60e01b611335565b801561076a576000805461ff00191690555050565b6066546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd490610d5b90339030906001600160e01b03196000351690600401611ca3565b602060405180830381865afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c9190611cd0565b610db95760405163ea8e4eb560e01b815260040160405180910390fd5b8483141580610dc85750848114155b15610de6576040516311e86f7360e01b815260040160405180910390fd5b8460005b81811015610e7657610e6e868683818110610e0757610e07611cf2565b9050602002016020810190610e1c9190611b94565b30868685818110610e2f57610e2f611cf2565b905060200201358b8b86818110610e4857610e48611cf2565b9050602002016020810190610e5d9190611b94565b6001600160a01b03169291906113b4565b600101610dea565b507f057589822293e3f912f1d5b49bbcd6513212cf97ecd74bffc31d4178653fd70c8787878787876040516105a596959493929190611dac565b6066546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd490610ef390339030906001600160e01b03196000351690600401611ca3565b602060405180830381865afa158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f349190611cd0565b610f515760405163ea8e4eb560e01b815260040160405180910390fd5b828114610f71576040516311e86f7360e01b815260040160405180910390fd5b8260005b81811015610ffd57858582818110610f8f57610f8f611cf2565b9050602002016020810190610fa49190611b94565b6001600160a01b03166108fc858584818110610fc257610fc2611cf2565b905060200201359081150290604051600060405180830381858888f19350505050158015610ff4573d6000803e3d6000fd5b50600101610f75565b507fd8043a55fabd5bef5435dec665e02f814171964a1ee23b23df5796a997a78aa2858585856040516110339493929190611e8d565b60405180910390a15050505050565b6040516001600160a01b0383166024820152604481018290526110a590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526113f2565b505050565b6066546040516001623b410b60e21b031981526001600160a01b039091169063ff12fbd4906110ed90339030906001600160e01b03196000351690600401611ca3565b602060405180830381865afa15801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e9190611cd0565b61069b5760405163ea8e4eb560e01b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561117e576110a5836114c4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156111d8575060408051601f3d908101601f191682019092526111d591810190611eb4565b60015b61123b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105fe565b600080516020611f3583398151915281146112aa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105fe565b506110a5838383611560565b600054610100900460ff166112dd5760405162461bcd60e51b81526004016105fe90611ecd565b606680546001600160a01b038086166001600160a01b03199283161790925560678054928516929091169190911790558051611320906068906020840190611865565b50611329611585565b6110a5630afed1ab60e11b5b6001600160e01b0319808216900361138f5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016105fe565b6001600160e01b0319166000908152606560205260409020805460ff19166001179055565b6040516001600160a01b03808516602483015283166044820152606481018290526113ec9085906323b872dd60e01b9060840161106e565b50505050565b6000611447826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115ae9092919063ffffffff16565b8051909150156110a557808060200190518101906114659190611cd0565b6110a55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105fe565b6001600160a01b0381163b6115315760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105fe565b600080516020611f3583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611569836115c7565b6000825111806115765750805b156110a5576113ec8383611607565b600054610100900460ff166115ac5760405162461bcd60e51b81526004016105fe90611ecd565b565b60606115bd84846000856116fb565b90505b9392505050565b6115d0816114c4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61166f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105fe565b600080846001600160a01b03168460405161168a9190611f18565b600060405180830381855af49150503d80600081146116c5576040519150601f19603f3d011682016040523d82523d6000602084013e6116ca565b606091505b50915091506116f28282604051806060016040528060278152602001611f556027913961182c565b95945050505050565b60608247101561175c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105fe565b6001600160a01b0385163b6117b35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105fe565b600080866001600160a01b031685876040516117cf9190611f18565b60006040518083038185875af1925050503d806000811461180c576040519150601f19603f3d011682016040523d82523d6000602084013e611811565b606091505b509150915061182182828661182c565b979650505050505050565b6060831561183b5750816115c0565b82511561184b5782518084602001fd5b8160405162461bcd60e51b81526004016105fe9190611954565b82805461187190611c69565b90600052602060002090601f01602090048101928261189357600085556118d9565b82601f106118ac57805160ff19168380011785556118d9565b828001600101855582156118d9579182015b828111156118d95782518255916020019190600101906118be565b506118e59291506118e9565b5090565b5b808211156118e557600081556001016118ea565b60006020828403121561191057600080fd5b81356001600160e01b0319811681146115c057600080fd5b60005b8381101561194357818101518382015260200161192b565b838111156113ec5750506000910152565b6020815260008251806020840152611973816040850160208701611928565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461199e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126119ca57600080fd5b813567ffffffffffffffff808211156119e5576119e56119a3565b604051601f8301601f19908116603f01168101908282118183101715611a0d57611a0d6119a3565b81604052838152866020858801011115611a2657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215611a5c57600080fd5b611a6585611987565b9350611a7360208601611987565b925060408501359150606085013567ffffffffffffffff811115611a9657600080fd5b611aa2878288016119b9565b91505092959194509250565b60008083601f840112611ac057600080fd5b50813567ffffffffffffffff811115611ad857600080fd5b6020830191508360208260051b8501011115611af357600080fd5b9250929050565b60008060008060008060608789031215611b1357600080fd5b863567ffffffffffffffff80821115611b2b57600080fd5b611b378a838b01611aae565b90985096506020890135915080821115611b5057600080fd5b611b5c8a838b01611aae565b90965094506040890135915080821115611b7557600080fd5b50611b8289828a01611aae565b979a9699509497509295939492505050565b600060208284031215611ba657600080fd5b6115c082611987565b60008060408385031215611bc257600080fd5b611bcb83611987565b9150602083013567ffffffffffffffff811115611be757600080fd5b611bf3858286016119b9565b9150509250929050565b60008060008060408587031215611c1357600080fd5b843567ffffffffffffffff80821115611c2b57600080fd5b611c3788838901611aae565b90965094506020870135915080821115611c5057600080fd5b50611c5d87828801611aae565b95989497509550505050565b600181811c90821680611c7d57607f821691505b602082108103611c9d57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b600060208284031215611ce257600080fd5b815180151581146115c057600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611d2857634e487b7160e01b600052601160045260246000fd5b5060010190565b8183526000602080850194508260005b85811015611d6b576001600160a01b03611d5883611987565b1687529582019590820190600101611d3f565b509495945050505050565b81835260006001600160fb1b03831115611d8f57600080fd5b8260051b8083602087013760009401602001938452509192915050565b606081526000611dc060608301888a611d2f565b8281036020840152611dd3818789611d2f565b90508281036040840152611de8818587611d76565b9998505050505050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b604081526000611ea1604083018688611d2f565b8281036020840152611821818587611d76565b600060208284031215611ec657600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251611f2a818460208701611928565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220be37d593d3b7044c272e95fee4984f7626cda64db3ffb58a7933d8d92997608964736f6c634300080d0033";

type TreasuryModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreasuryModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TreasuryModule__factory extends ContractFactory {
  constructor(...args: TreasuryModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TreasuryModule> {
    return super.deploy(overrides || {}) as Promise<TreasuryModule>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TreasuryModule {
    return super.attach(address) as TreasuryModule;
  }
  override connect(signer: Signer): TreasuryModule__factory {
    return super.connect(signer) as TreasuryModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryModuleInterface {
    return new utils.Interface(_abi) as TreasuryModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreasuryModule {
    return new Contract(address, _abi, signerOrProvider) as TreasuryModule;
  }
}
